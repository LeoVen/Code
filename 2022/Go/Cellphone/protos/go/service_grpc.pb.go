// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: service.proto

package cellphone

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	// Cellphone
	GetCellphoneById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Cellphone, error)
	FetchSingle(ctx context.Context, in *FetchSingleRequest, opts ...grpc.CallOption) (*FetchSingleResponse, error)
	BulkInsert(ctx context.Context, in *BulkInsertRequest, opts ...grpc.CallOption) (*BulkInsertResponse, error)
	// Provider
	GetProviderById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Provider, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) GetCellphoneById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Cellphone, error) {
	out := new(Cellphone)
	err := c.cc.Invoke(ctx, "/Service/GetCellphoneById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) FetchSingle(ctx context.Context, in *FetchSingleRequest, opts ...grpc.CallOption) (*FetchSingleResponse, error) {
	out := new(FetchSingleResponse)
	err := c.cc.Invoke(ctx, "/Service/FetchSingle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) BulkInsert(ctx context.Context, in *BulkInsertRequest, opts ...grpc.CallOption) (*BulkInsertResponse, error) {
	out := new(BulkInsertResponse)
	err := c.cc.Invoke(ctx, "/Service/BulkInsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetProviderById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Provider, error) {
	out := new(Provider)
	err := c.cc.Invoke(ctx, "/Service/GetProviderById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	// Cellphone
	GetCellphoneById(context.Context, *IdRequest) (*Cellphone, error)
	FetchSingle(context.Context, *FetchSingleRequest) (*FetchSingleResponse, error)
	BulkInsert(context.Context, *BulkInsertRequest) (*BulkInsertResponse, error)
	// Provider
	GetProviderById(context.Context, *IdRequest) (*Provider, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) GetCellphoneById(context.Context, *IdRequest) (*Cellphone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCellphoneById not implemented")
}
func (UnimplementedServiceServer) FetchSingle(context.Context, *FetchSingleRequest) (*FetchSingleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchSingle not implemented")
}
func (UnimplementedServiceServer) BulkInsert(context.Context, *BulkInsertRequest) (*BulkInsertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkInsert not implemented")
}
func (UnimplementedServiceServer) GetProviderById(context.Context, *IdRequest) (*Provider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviderById not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_GetCellphoneById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetCellphoneById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Service/GetCellphoneById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetCellphoneById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_FetchSingle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchSingleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).FetchSingle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Service/FetchSingle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).FetchSingle(ctx, req.(*FetchSingleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_BulkInsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkInsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).BulkInsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Service/BulkInsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).BulkInsert(ctx, req.(*BulkInsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetProviderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetProviderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Service/GetProviderById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetProviderById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCellphoneById",
			Handler:    _Service_GetCellphoneById_Handler,
		},
		{
			MethodName: "FetchSingle",
			Handler:    _Service_FetchSingle_Handler,
		},
		{
			MethodName: "BulkInsert",
			Handler:    _Service_BulkInsert_Handler,
		},
		{
			MethodName: "GetProviderById",
			Handler:    _Service_GetProviderById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
